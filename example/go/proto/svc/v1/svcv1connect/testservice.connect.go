// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/v1/testservice.proto

package svcv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/barakmich/connectpyexample/proto/svc/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CapsServiceName is the fully-qualified name of the CapsService service.
	CapsServiceName = "svc.v1.CapsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CapsServiceCapsProcedure is the fully-qualified name of the CapsService's Caps RPC.
	CapsServiceCapsProcedure = "/svc.v1.CapsService/Caps"
	// CapsServiceMustErrorProcedure is the fully-qualified name of the CapsService's MustError RPC.
	CapsServiceMustErrorProcedure = "/svc.v1.CapsService/MustError"
)

// CapsServiceClient is a client for the svc.v1.CapsService service.
type CapsServiceClient interface {
	Caps(context.Context, *connect_go.Request[v1.CapsRequest]) (*connect_go.Response[v1.CapsResponse], error)
	MustError(context.Context, *connect_go.Request[v1.MustErrorRequest]) (*connect_go.Response[v1.MustErrorResponse], error)
}

// NewCapsServiceClient constructs a client for the svc.v1.CapsService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCapsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CapsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &capsServiceClient{
		caps: connect_go.NewClient[v1.CapsRequest, v1.CapsResponse](
			httpClient,
			baseURL+CapsServiceCapsProcedure,
			opts...,
		),
		mustError: connect_go.NewClient[v1.MustErrorRequest, v1.MustErrorResponse](
			httpClient,
			baseURL+CapsServiceMustErrorProcedure,
			opts...,
		),
	}
}

// capsServiceClient implements CapsServiceClient.
type capsServiceClient struct {
	caps      *connect_go.Client[v1.CapsRequest, v1.CapsResponse]
	mustError *connect_go.Client[v1.MustErrorRequest, v1.MustErrorResponse]
}

// Caps calls svc.v1.CapsService.Caps.
func (c *capsServiceClient) Caps(ctx context.Context, req *connect_go.Request[v1.CapsRequest]) (*connect_go.Response[v1.CapsResponse], error) {
	return c.caps.CallUnary(ctx, req)
}

// MustError calls svc.v1.CapsService.MustError.
func (c *capsServiceClient) MustError(ctx context.Context, req *connect_go.Request[v1.MustErrorRequest]) (*connect_go.Response[v1.MustErrorResponse], error) {
	return c.mustError.CallUnary(ctx, req)
}

// CapsServiceHandler is an implementation of the svc.v1.CapsService service.
type CapsServiceHandler interface {
	Caps(context.Context, *connect_go.Request[v1.CapsRequest]) (*connect_go.Response[v1.CapsResponse], error)
	MustError(context.Context, *connect_go.Request[v1.MustErrorRequest]) (*connect_go.Response[v1.MustErrorResponse], error)
}

// NewCapsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCapsServiceHandler(svc CapsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	capsServiceCapsHandler := connect_go.NewUnaryHandler(
		CapsServiceCapsProcedure,
		svc.Caps,
		opts...,
	)
	capsServiceMustErrorHandler := connect_go.NewUnaryHandler(
		CapsServiceMustErrorProcedure,
		svc.MustError,
		opts...,
	)
	return "/svc.v1.CapsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CapsServiceCapsProcedure:
			capsServiceCapsHandler.ServeHTTP(w, r)
		case CapsServiceMustErrorProcedure:
			capsServiceMustErrorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCapsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCapsServiceHandler struct{}

func (UnimplementedCapsServiceHandler) Caps(context.Context, *connect_go.Request[v1.CapsRequest]) (*connect_go.Response[v1.CapsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("svc.v1.CapsService.Caps is not implemented"))
}

func (UnimplementedCapsServiceHandler) MustError(context.Context, *connect_go.Request[v1.MustErrorRequest]) (*connect_go.Response[v1.MustErrorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("svc.v1.CapsService.MustError is not implemented"))
}
